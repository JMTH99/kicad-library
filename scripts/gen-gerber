#!/usr/bin/env python

import sys
import os
import argparse
import logging
import os.path
import zipfile
import tempfile
import glob
import shutil


from pcbnew import *


class Application():

    gerber_spec = {
        "gtl" : {"layers" : [F_Cu], "desc" : "Copper - Top"},
        "gl2" : {"layers" : [In1_Cu], "desc" : "Copper - Layer 2"},
        "gl3" : {"layers" : [In2_Cu], "desc" : "Copper - Layer 3"},
        "gbl" : {"layers" : [B_Cu], "desc" : "Copper - Bottom"},
        "gts" : {"layers" : [F_Mask], "desc" : "Soldermask - Top"},
        "gto" : {"layers" : [F_SilkS, Edge_Cuts], "desc" : "Legend - Top"},
        "gbs" : {"layers" : [B_Mask], "desc" : "Soldermask - Bottom"},
        "gbo" : {"layers" : [B_SilkS], "desc" : "Legend - Bottom"},
        "gko" : {"layers" : [Edge_Cuts], "desc" : "Profile"},
    }

    def __init__(self):
        logging.basicConfig(format="%(levelname)s: %(message)s")
        self.logger = logging.getLogger()
        
        parser = argparse.ArgumentParser(description="Converts a kicad pcb to gerber files.")
        
        parser.add_argument("--output-dir", "-d", help="The output directory, relative to the directory the board file is in.  Defaults to the same directory the board file is in.")
        parser.add_argument("--zip", help="Put the output gerber files in a zip file", action="store_true")

        
        parser.add_argument("filename", help="kicad pcb file")

        self.args = parser.parse_args()
        
        
    def run(self):
        
        try:
            ## Load board ##
            self.pcb = LoadBoard(self.args.filename);
            self.pctl = PLOT_CONTROLLER(self.pcb)
            self.popt = self.pctl.AccessPlotOpts()            
            
            self.boardname = os.path.splitext( os.path.basename( self.args.filename ))[0]

            
            ## Read pcb plotter settings ##
            pcb_popt = self.pcb.GetPlotOptions()

            
            ## Set plotter output directory ##
            output_dir = self.args.output_dir if self.args.output_dir else pcb_popt.GetOutputDirectory()
            full_output_dir = os.path.join( os.path.dirname( os.path.abspath( self.args.filename )), output_dir )
            
            if ( self.args.zip ):
                zip_tmp_dir = tempfile.mkdtemp(prefix="gen-gerber-" + self.boardname)
                self.popt.SetOutputDirectory( zip_tmp_dir )
            else:
                self.popt.SetOutputDirectory( output_dir )

                
            ## Create the output directory if it does not exists ##
            if not os.path.exists( output_dir ):
                os.makedirs( output_dir )
            
            self.plot()
            
            
            if self.args.zip:
                
                
                zip_filename = os.path.join( full_output_dir, self.boardname ) + ".zip"
                
                zipf = zipfile.ZipFile( zip_filename, 'w' )
                
                for root, dirs, files in os.walk( zip_tmp_dir ):
                    for fn in files:
                        zipf.write(os.path.join( root, fn ), os.path.basename( fn ))
            
                shutil.rmtree( zip_tmp_dir )
           
                               
            
        except IOError as err:
            self.logger.error("Unable to load board file %s" % self.args.filename)
            return
    
    
    def plot(self):
        
        for ext, spec in self.gerber_spec.iteritems():
            
            self.logger.debug( "Plotting: %s, Layers: %s, Filename: %s" % 
                               (spec["desc"], 
                                str(spec["layers"]),
                                self.boardname + "." + ext) )
            
            self.pctl.OpenPlotfile( "", PLOT_FORMAT_GERBER, "", spec["layers"][0], ext )

            for layer in spec["layers"]:
                self.pctl.PlotLayer( layer )

            self.pctl.ClosePlot()


if __name__=="__main__":
    app = Application()
    app.run()
